// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Type {
  id    String @id @default(uuid())
  name  String
  image String
  cars  Car[]
}

model Make {
  id     String  @id @default(uuid())
  name   String
  logo   String
  cars   Car[]
  models Model[]
}

model Category {
  id   String @id @default(uuid())
  name String
  cars Car[]
}

model Model {
  id     String @id @default(uuid())
  name   String
  makeId String
  make   Make   @relation(fields: [makeId], references: [id], onDelete: Cascade)
  cars   Car[]
}

model Car {
  id           String    @id @default(uuid())
  makeId       String
  make         Make      @relation(fields: [makeId], references: [id])
  typeId       String
  type         Type      @relation(fields: [typeId], references: [id])
  modelId      String
  model        Model     @relation(fields: [modelId], references: [id])
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  year         String
  color        String
  rentalPrice  Decimal?
  price        Decimal
  isAvailable  Boolean   @default(true)
  isFeatured   Boolean?  @default(false)
  location     String
  mileage      Int
  engineSize   String
  drive        String
  transmission String
  HP           Int
  acceleration Decimal
  fuelType     String
  images       Image[]
  features     Feature[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Image {
  id    String @id @default(uuid())
  carId String
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  url   String
}

model Feature {
  id    String @id @default(uuid())
  carId String
  car   Car    @relation(fields: [carId], references: [id], onDelete: Cascade)
  name  String
}
